enum Status {
  NEW
  COMPLETED
  IN_PROGRESS
  NEWVALUE
}

type Taskmaster {
  id: ID!
  title: String!
  body: String
  status: Status!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTaskmasterConnection {
  items: [Taskmaster!]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelStatusInput {
  eq: Status
  ne: Status
}

input ModelTaskmasterFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  body: ModelStringInput
  status: ModelStatusInput
  and: [ModelTaskmasterFilterInput]
  or: [ModelTaskmasterFilterInput]
  not: ModelTaskmasterFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  syncTaskmasters(filter: ModelTaskmasterFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTaskmasterConnection
  getTaskmaster(id: ID!): Taskmaster
  listTaskmasters(filter: ModelTaskmasterFilterInput, limit: Int, nextToken: String): ModelTaskmasterConnection
}

input CreateTaskmasterInput {
  id: ID
  title: String!
  body: String
  status: Status!
  _version: Int
}

input UpdateTaskmasterInput {
  id: ID!
  title: String
  body: String
  status: Status
  _version: Int
}

input DeleteTaskmasterInput {
  id: ID!
  _version: Int
}

type Mutation {
  createTaskmaster(input: CreateTaskmasterInput!, condition: ModelTaskmasterConditionInput): Taskmaster
  updateTaskmaster(input: UpdateTaskmasterInput!, condition: ModelTaskmasterConditionInput): Taskmaster
  deleteTaskmaster(input: DeleteTaskmasterInput!, condition: ModelTaskmasterConditionInput): Taskmaster
}

input ModelTaskmasterConditionInput {
  title: ModelStringInput
  body: ModelStringInput
  status: ModelStatusInput
  and: [ModelTaskmasterConditionInput]
  or: [ModelTaskmasterConditionInput]
  not: ModelTaskmasterConditionInput
}

type Subscription {
  onCreateTaskmaster: Taskmaster @aws_subscribe(mutations: ["createTaskmaster"])
  onUpdateTaskmaster: Taskmaster @aws_subscribe(mutations: ["updateTaskmaster"])
  onDeleteTaskmaster: Taskmaster @aws_subscribe(mutations: ["deleteTaskmaster"])
}
